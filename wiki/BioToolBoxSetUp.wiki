#summary A new users guide for installing BioToolBox and its prerequisites.
#labels Featured SetUp

=Installing bioperl and other prerequisites for BioToolBox=

This guide is for new users looking to set up bioperl and BioToolBox. Advanced users can probably just run the [Pod_check_dependencies check_dependencies.pl] script included with the BioToolBox package (although scanning below won't hurt).
 
==Contents==
	# [BioToolBoxSetUp#Before_you_begin Before you begin]
	# [BioToolBoxSetUp#Local_or_Root Local or Root]
	# [BioToolBoxSetUp#Installing_locally Installing locally]
	# [BioToolBoxSetUp#Installing_Perl_Modules Installing Perl Modules]
	# [BioToolBoxSetUp#BioToolBox_prerequisite_modules BioToolBox prerequisite modules]
	# [BioToolBoxSetUp#Installing_database_modules Installing database modules]
	# [BioToolBoxSetUp#Installing_Bioperl Installing Bioperl]
	# [BioToolBoxSetUp#Installing_Graphing_Modules Installing Graphing Modules]
	# [BioToolBoxSetUp#Installing_bigWig_and_bigBed_support Installing bigWig and bigBed support]
	# [BioToolBoxSetUp#Installing_support_for_legacy_wig_files Installing support for legacy wig files]
	# [BioToolBoxSetUp#Installing_the_Ensembl_Perl_API Installing the Ensembl Perl API]

==Before you begin==
This guide assumes a few things.
	* First, you have access to a unix-based computer, including Linux and Mac OS X. Windows users may need to explore other options (a new [http://store.apple.com computer] or a new [http://www.ubuntu.com/ operating system])
	* Second, you have relative familiarity with command line usage in the terminal. Users should be able to move around and understand the file system directory, view and manipulate files, run programs, etc.
	* Third, Perl is installed on your machine. Almost every unix-based computer should have it installed, at least in some basic form. The BioToolBox programs have been tested with Perl versions 5.8.8 and 5.10.0. I assume anything > 5.8 should work. It's also useful to know whether it is 32-bit or 64-bit executable. 64-bit is preferred, if only because you avoid out-of-memory errors when working with large datasets. Run `perl -v` to find out the version and bit-ness. Familiarity with Perl is helpful, insofar as installing modules through CPAN, but Perl programming skills are not a requirement.
	* Finally, you'll need to have GNU C compiler (GCC) installed for compiling software from source code. Most Linux distributions should already have this installed; if not, it's easily obtainable using your favorite package manager. On Mac OS X, you'll need to install the Developer Tools from your installation disc or XCode from the Mac App Store. Be sure to include the command line tools from within XCode.
	* Mac users may wish to look more closely at my other guide, [SetupForMacOSX Set up for Mac OS X], although this guide will mostly work as well.

==Local or Root==
If you are an administrator on the computer, then you can install bioperl and other Perl modules in the system directories for multiple users. This can sometimes make things easier and avoids multiple installations. However, it's easier to break something, especially if you're not sure what you are doing.

If you don't have administrator access, or prefer to keep things confined, then you can easily install in just your own little world, AKA your home directory.

==Installing locally==
The easiest way to install Perl modules locally in your own directory is to use the `local::lib` module. By installing this module, it will automatically set up your own Perl libraries in your home directory.

Download the latest [http://search.cpan.org/perldoc?local::lib version] manually from CPAN, and follow the directions in the readme under the bootstrap section. Or follow the directions below within the extracted directory:
<pre>
	perl Makefile.PL --bootstrap
	make test
	make install
</pre>

You should now have a `lib` or `perl5` directory within your home directory. This will contain your local Perl modules. If you're lucky, it should also have installed an updated version of CPAN.

Now you just need to set up your environment. This is assuming you're using the BASH shell for your login (a pretty safe assumption for most). Run the following command.
<pre>
	echo 'eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)' >> ~/.bashrc
</pre>

If you look at your `.bashrc` file, you should find you've just added the above line to the end of the file. This will take care of setting up environment variables so that everytime you log in, you will use your own Perl libraries and not the system libraries. You should log out and back in for this to take effect. Then run `env` to print out your environment variables and confirm them. You should have a number of Perl related environment variables listed, including `PERL5LIB` and `PERL_LOCAL_LIB_ROOT`. If not, try adding the above line to your `~/.profile` file instead (works for Mac OS X).

==Installing Perl Modules==
This assumes you now have a Perl environment set up, either locally (see above), system-wide through the operating system's libraries (root access), or a separate Perl installation (either local or root). Remember, if you're working with a system library, you should prepend commands with `sudo` to grant root access. 

The safest way to start the CPAN shell is through this command
<pre>
	perl -MCPAN -e 'shell'
</pre>
You may also be able to start the CPAN shell by simply typing `cpan` at the prompt, depending on your installation and configuration.

If this is your first time running the CPAN shell, you may need to go through some basic configurations. It's usually safe to accept the defaults, but feel free to change as necessary.

Once you've started the CPAN shell, let's try installing a few things. Here is an extremely simplified primer for working with the CPAN shell.

You can search for modules by entering this command
<pre>
	m /something/
</pre>

You can also search for a distribution.
<pre>
	d /something/
</pre>

You can install a module or distribution this way
<pre>
	install some::module
</pre>

Or by specifying the exact version file
<pre>
	install SOMEBODY/SomeModule-1.0.1.tar.gz
</pre>

It's possible that CPAN will detect prerequisites for your module. If so, it will attempt to prepend their installation before installing your requested module. Just say yes to those.

If the module was installed properly, you should find something like 
<pre>
	/usr/bin/make install -- OK
</pre>
somewhere near the end of all the text that goes by. If you see `NOT OK`, then something went wrong and you will have to trouble shoot by looking back at the error messages. It's usually because something else was missing, or a C library is of the wrong architecture for the version you're using, e.g. 32-bit versus 64-bit, or i386 versus PPC.

Try installing a few modules. Here are some basic ones to try first
	* `readline`
	* `Term::ReadKey`
	* `YAML`
	* `Digest::SHA`
	* `CPAN`
	* `Module::Build`
	* `ExtUtils::MakeMaker`
	* `Test::More`
	* `Data::Stag`
The last two are prerequisites for BioPerl, see below.

==BioToolBox prerequisite modules==
Now that you have some basic Perl modules installed, let's go for some others that are required for some or all of the *BioToolBox* programs. There are two ways to install these.

First, you can run the [Pod_check_dependencies check_dependencies.pl] script in the root directory of the *BioToolBox* package. This will use CPAN to check for known dependencies, compare them with what is available from CPAN, and offer to install them for you. Note that some external dependencies may need to be taken care of manually.

Second, you can install them manually through the CPAN shell. Here is a list of basic requirements.
	* `Config::Simple`
	* `IO::Zlib`
	* `Statistics::Lite`
	* `Statistics::Descriptive`
	* BioPerl (see below)

There are other modules recommended by *BioToolBox*, but they are only required for specific scripts or functions.

==Installing Bioperl==
Bioperl is the primary distribution from which most of the *BioToolBox* programs are based on. All of the data collection scripts rely on it. Hence, this is a major (but not absolute) requirement. 

Your Linux operating system's package manager (if it has one) may already have a package for bioperl which you could install. This will install it in the system libraries. With that said, I generally prefer to install through the CPAN Shell. If you're installing locally, this may be your only option. You could also install the latest bioperl-live modules available from the [http://www.bioperl.org/wiki/Main_Page bioperl] developer's site. 

Bioperl is a complex distribution, containing hundreds of modules, some with external dependencies, and numerous Perl scripts. It will warn you about missing prerequisites; Pay attention to the required ones, while the recommended ones can usually be safely ignored. The installation routine will ask you several questions. In general, the external dependencies are not necessary (you'll find out later if you need one when something doesn't work), internet-based tests are not necessary, and it doesn't hurt to install all of the scripts (some are useful). 

==Installing database modules==
If you intend to use a database for storing genome annotation, then a relational database is in order. The *BioToolBox* programs relies on the [http://bioperl.org/wiki/Module:Bio::DB::SeqFeature::Store Bio::DB::SeqFeature::Store] schema. This can be utilized on a SQLite, MySQL, or PostgreSQL database. A memory database is also available, although it's usefulness is quite limited. The SQLite database is a safe, simple alternative without the overhead and complexity. The others will provide much better performance, especially in multi-user environments.

If it's not installed already, most Linux distributions and Mac OS X versions have packages or installers available to install one or more of these database systems on your computer, usually as a system-wide service. You'll have to look elsewhere for help on installing one. Be sure to also install the associated developer files or package, which include the libraries and header files necessary for installing the Perl modules. 

Once a database is installed, you can then install the appropriate Perl module drivers. The `DBI` module is required, and the subsequent ones are specific for your chosen database. 
	* `DBI`
	* `DBD::SQLite`
	* `DBD::mysql`
	* `DBD::Pg`

If you do not need or want to install a database, that's OK too. Most *BioToolBox* programs happily take BED style input files with genomic coordinates, rather than retrieving coordinates from genomic annotation stored in the database.

==Installing Graphing Modules==
There are a few *BioToolBox* scripts that allow you to generate simple plots or graphs as PNG files. These rely on the [http://search.cpan.org/dist/GD/ GD] Perl module, which, in turn, rely on [http://www.boutell.com/gd/ GD] libraries. These are also required for [http://gmod.org/wiki/GBrowse GBrowse], if you intend to install that as well. 

If the GD libraries are not installed already (most Linux distributions should have them), you can readily obtain them through your package manager. For Mac OS X, you'll have to install from source (good luck), use [http://www.finkproject.org/ Fink], or obtain pre-compiled packages from [http://sourceforge.net/projects/gmod/files/Generic%20Genome%20Browser/libgd-MacOSX/ here]. For more information about Mac OS X, see [SetupForMacOSX#Installing_GD_Libraries Installing GD Libraries].

Once the GD libraries are installed, you can then install the GD Perl modules using the CPAN Shell. 
	* `GD`
	* `GD::Graph`
	* `GD::Graph::smoothlines`

Note that on Mac OS X using libGD installed through Fink, I generally see test errors when installing the GD Perl module. I have been able to force install (ignoring errors), and everything seems to still work. 

==Installing Sam/Bam file support==
To work with next generation sequencing data, you'll need to install [http://samtools.sourceforge.net samtools] and the corresponding Perl module [http://search.cpan.org/dist/Bio-SamTools/ Bio-SamTools]. This will allow you to use the ubiquitous Bam file format in conversions and analysis.

Download the source code for the latest version from the samtools [http://sourceforge.net/projects/samtools/files/samtools/ SourceForge] project, and unpack it in your directory.

If you are using 64-bit Perl, you'll need to compile samtools as a 64-bit executable. Using your favorite text editor (`nano` is a very simple and easy to use text editor through the terminal), edit the `Makefile` file. At the beginning, find the line that begins with `CFLAGS`. Delete the comment `#` character in front of `-m64`, and save the file.

Next, compile the program.
<pre>
	make
	make razip
</pre>

The samtools `make` does not include test or install methods. For a system-wide installation, I will copy the `samtools-0.1.x` folder to `\usr\local\`, and generate symlinks to the executables `samtools` and `razip` into `\usr\local\bin\`, as well as symlink the man page `samtools.1` into the appropriate Man page directory. For a local home directory, just place the directory someplace easily accessible where you won't lose it. I'll also create symlinks to the executables in my home `~\bin` directory for quick access. 

To install the Bio-SamTools Perl module, you'll need access to the header and library folders in the samtools directory (this is why you need to keep it handy). Do a search for Bio-SamTools from within the CPAN Shell, and install the latest version you find. During the installation, the Installer will ask for the location of the samtools headers and libraries. Enter the full path to where you've placed it, and it should compile and install fine.

One error you may or may not encounter is regarding shared libraries, and errors mentioning recompiling with "-fPIC". Some combinations of Perl and GCC don't mix well. In this case, go back to the samtools `Makefile`, re-edit the CFLAGS line and add "-fPIC" to the line (make sure there isn't a `#` comment character before it!). Then recompile.
<pre>
	make clean
	make
	make razip
</pre>
Repeat the Bio-Samtools installation (you may need to issue the clean command from within CPAN Shell). It should work now.

==Installing bigWig and bigBed support==
The UCSC Genome site developed the [http://genome.ucsc.edu/goldenPath/help/bigWig.html bigWig] and [http://genome.ucsc.edu/goldenPath/help/bigBed.html bigBed] file formats for easy sharing and viewing of dense genomic data, such as from next generation sequencing technologies. These are self-contained, compressed, indexed, binary file formats, similar to a Bam file, that can be accessed locally or remotely. While they are tremendously helpful in viewing data, I have found they are also quite useful in genome analysis with the *BioToolBox* scripts. Their use, while not required, are highly recommended if you're using large datasets. 

You'll first need to compile the libraries used with big files. You can follow the instructions for the installation in the [http://search.cpan.org/dist/Bio-BigFile/ Bio-BigFile] Perl module README, or the instructions below. First, make sure you have prerequisites, including the source headers (developer package) for the GD2 libraries and MySQL. Next, download Jim Kent's [http://hgdownload.cse.ucsc.edu/admin/jksrc.zip source] code. Then follow these instructions.
<pre>
	unzip jksrc.zip
	cd kent/src/
	export MACHTYPE=x86_64     # or replace with i386 or ppc as appropriate
	export KENT_SRC=```pwd```
	
	cd lib/
	make
	cd ..
</pre>

Next, install Bio-BigFile using the CPAN Shell. During installation, it will need to know the location of the kent/src/ directory. It should automatically find it from the environment variables you exported above (both are essential). Note that if you run CPAN Shell under `sudo`, your environment variables may not carry over if you performed the above not as root. 

You may encounter the same error as with samtools above regarding "-fPIC". In that case, go back and edit the file `kent/src/inc/common.mk`. Find the line beginning with CFLAGS and add "-fPIC" to the line. Save, `make clean`, and `make` again. 

Now that you have Bio-BigFile installed, you should go ahead and compile some of the useful utilities for converting and working with bigFiles. First you will need to make the destination `bin` directory. 
<pre>
	mkdir ~/bin
	mkdir ~/bin/x86_64     # this should be whatever you set your MACHTYPE
</pre>

Next, enter the `kent/src/util` directory, where you'll find numerous subdirectories for a number of utility programs. Enter each one separately, and execute `make`. It will compile the executable, and place it in your bin directory. Here is a short list I would recommend.
	* `wigToBigWig`
	* `bedGraphToBigWig`
	* `bedToBigBed`
	* `bigWigInfo`
	* `bigBedInfo`

==Installing support for legacy wig files==
There are a number of reasons to go with binary bigWig files over the original wiggle implementation, but if you have legacy data, *BioToolBox* will work with it. The legacy adaptor is [http://search.cpan.org/perldoc?Bio::Graphics::Wiggle Bio::Graphics::Wiggle], and was developed as part of the [http://gmod.org/wiki/GBrowse GBrowse] browser. The associated Perl script, [http://search.cpan.org/perldoc?wiggle2gff3.pl wiggle2gff3.pl], is part of GBrowse and will take as input a text wiggle file (.wig) and generate binary files (.wib) referenced by a GFF3 file. This GFF3 file, in turn, will need to be loaded in a Bio::DB::SeqFeature::Store database.

To install support, you'll need to install from CPAN at least  [http://search.cpan.org/dist/Bio-Graphics/ Bio-Graphics] and the [http://search.cpan.org/perldoc?wiggle2gff3.pl wiggle2gff3.pl] script (or the complete [http://search.cpan.org/dist/GBrowse/ GBrowse]). These will require a number of other prerequisites, which the CPAN Shell should be able to handle.

==Installing the Ensembl Perl API==
To retrieve genome annotation from Ensembl's public MySQL database using the *BioToolBox* script [Pod_get_ensembl_annotation get_ensembl_annotation.pl], you will need to install Ensembl's Perl API modules. It is not available through CPAN, but you can find installation instructions [http://www.ensembl.org/info/docs/api/api_installation.html here]. 

Ensembl is not very explicit about prerequisites, but you will need Perl modules `DBI` and `DBD::mysql` installed, as well as BioPerl. Their recommendation for BioPerl is an old version; the current CPAN or live version should work just as well, and it should be installed from the above instructions.

Rather than following their instructions for setting up your environment, you can simply manually copy their `EnsEMBL/` directory and all its contents (found under `ensembl/modules/Bio/` after extracting their archive) into your `Perl5/lib` directory, or wherever your Perl modules are installed. The `EnsEMBL` directory will go into your `Bio/` directory, along with the rest of BioPerl.

Note that because this is essentially a manual installation; any prerequisites or updates must also be done manually, and some functionality may be broken. With that said, I have not had any issues with at least the BioToolBox script `get_ensembl_annotation.pl`. Be forewarned.

Ensembl publishes a new Core API with each database release. If you are not seeing the latest genome version in the *BioToolBox* script [Pod_get_ensembl_annotation get_ensembl_annotation.pl], you should update your Ensembl Perl API modules.
