#summary My own guide for setting up a Mac OS X computer with bioperl and GBrowse for bioinformatics analysis.

=Preparing a Mac OS X computer for bioinformatics analysis using bioperl=



==Prerequisites==
	* A relative familiarity with command line usage in the terminal. Users should be able to move around and understand the file system directory, view and manipulate files, run programs, etc.
	* Some very basic understanding of perl programs, modules, and how to install upgrade perl modules using CPAN. Knowing and writing the Perl language is not necessary.
	* Access to an account with administrator privileges. While it’s possible to do everything in a local home directory, I think it’s just easier to install in the main system. Fortunately, these installations are pretty safe and shouldn't break the system. Simply installing perl modules rarely (if at all possible) breaks the system, particularly with recent versions (earlier versions were another story). Using the Fink (or MacPorts) package manager keeps everything localized to a single directory (`/sw` for Fink, `/opt` for MacPorts) and never touches system directories. Finally, anything installed under `/usr/local/` is off-limits to Apple, so again there should be no conflicts with Apple system directories.
	* A good text editor. Microsoft Word will not do, and TextEdit is too limited. I prefer the free and quite capable [http://www.barebones.com/products/textwrangler/ TextWrangler], but several other competent editors also exist.
	* If you are using Mac OS X 10.6 Snow Leopard, then Perl can run as a 64 bit executable. This speeds some things up, but more importantly allows for more memory usage (some of these data files can consume GB of RAM!). By default, on a 64-bit computer with 10.6, perl should automatically execute Perl 5.10.0 as a 64-bit executable and you shouldn't have to do anything. But you'll need to know this when installing Fink below.
	* This may (or may not) be obvious, but you'll need to install the Developer Tools from Apple. This can be found under the Optional Installs folder on the OS X Installation Disc. It may also be downloaded from Apple's [http://developer.apple.com/ Developer site]. You only really need to install the base and Unix development tools, unless you also intend to write Cocoa or iPhone Apps. 

==Setting up Fink==
[http://www.finkproject.org/ Fink] is a convenient package manager for installing numerous open source software packages on Mac OS X. Using a package manager makes installation, upgrading, and removal of third party software much easier. 

An alternative package manager is [http://www.macports.org MacPorts], which should accomplish the same thing; I’m just more familiar with Fink for historical reasons. One other thing to keep in mind is that Fink tries to use many of the default Mac OS X libraries and executables whenever possible, whereas MacPorts sometimes wants to install everything on its own. This creates duplicates in your system, for example duplicate Perl installations. This can be good in that you get a newer version, but more complicated because you have to keep track of which version is executed.

To install, download the binary installer and follow the online directions. Note that there is not a binary installer for Mac OS X 10.6 Snow Leopard. For that, you'll need to bootstrap the installation. It's best to follow their [http://www.finkproject.org/download/srcdist.php instructions]. 

*Important* If you’ll be running 64-bit programs (e.g. default Perl 10.0 under Mac OS X 10.6), you must set up Fink to be 64-bit as well! In the source install, it will ask you this question at the beginning.

Fink installs into the `/sw` directory. This makes it convenient by completely isolating Fink software from the system directories, preventing potential conflicts and overwrites. MacPorts accomplishes the same thing by installing in `/opt`. 

Make sure you have your account(s) set up to use Fink by running 
<pre>
	/sw/bin/pathsetup.sh
</pre>

The various software packages available to Fink users are primarily found in two different source trees, _stable_ and _unstable_. The versions in the stable tree are usually older, but in theory more reliable. Unfortunately, not everything I want is included in the stable tree, necessitating looking in the unstable tree. I find that many programs are only found under the unstable tree, which, despite the name, are often quite usable. These are always the latest versions.

To enable the unstable tree, edit the file `/sw/etc/fink.conf`. Find the line that begins with "Trees:" edit the line to look like the following.
<pre>
	Trees: local/main stable/main stable/crypto unstable/main unstable/crypto
</pre>

After installing, and optionally setting up unstable trees, update Fink using the following commands. 
<pre>
	sudo fink selfupdate
	fink scanpackages
	fink index
</pre>

To find a program to install, run the following command.
<pre>
	fink list <program>
</pre>

To list installed programs, run
<pre>
	fink list -i
</pre>

To install the program you want, run the following command. Fink will identify necessary prerequisites and offer to install those as well. Always accept those. 
<pre>
	fink install <program>
</pre>

You can learn more by running `fink --help`.
	 
==Installing a database==
GBrowse as well as many of the biotoolbox programs require genome annotation to be put into a database. There are several choices.

SQLite is a lightweight database system that stores all of the database tables in a single file. It's reasonably fast and easy to manage - one file per database. This is already installed in Mac OS X, although you will need to install the appropriate Perl modules to use it.

MySQL is a commonly used open source database that can be used from small databases to large enterprise databases. It uses a daemon to handle multiple simultaneous connections and read/write transactions. Note that if you are using Mac OS X Server, MySQL comes pre-installed for you. However, the standard socket location is different between Apple's Server MySQL and a typical install; you'll need to link `/var/mysql/mysql.sock` to the typical location of `/tmp/mysql.sock`. 

PostGreSQL is another alternative open source database with capabilities similar to MySQL. I don't personally have any experience with it, but it is supported by BioPerl.



===Installing MySQL===
You can download an installation package from the main [http://www.mysql.com MySQL] web site. While installing just the pre-compiled version is tempting, it probably won't work very well later on. The reason is that to install the Perl database driver modules you'll need some developer headers that are only included with the source install. So if you have to install from source and compile the executable for your machine, you might as well save a little effort and go through Fink to handle the compilation for you.

To install MySQL through Fink, enter the following:
<pre>
	sudo fink install mysql mysql-client mysql15-dev mysql15-shlibs
</pre>

To make things easier, I also like to install the MySQL Gui [http://www.mysql.com/downloads/workbench/ Workbench]. This is especially helpful when you're not familiar with MySQL language and commands but need to set up databases, add users, and set permissions.

To start up MySQL, run
<pre>
	sudo mysqld_safe –u root &
</pre>
This starts up the MySQL server as a system process in the background. Make sure you have used `sudo` in the past minute or so and authenticate with your password; try running `sudo ls` prior.

Set the root password
<pre>
	mysqladmin –u root password <password>
</pre>

Test by starting the client. Exit the client by typing `exit` at the prompt.
<pre>
	mysql –u root –p
</pre>

Install the daemon loader for mysql
<pre>
	sudo fink install daemonic
</pre>

Set up MySQL to start up automatically by running
<pre>
	sudo daemonic enable mysql
</pre>

There should now be a startup plist file in `/Library/StartupItems/`.


===Installing GD Libraries===
These are needed primarily by Bio::Graphics and GBrowse, but some of my graphing programs also use it. 

You can install GD from [https://bitbucket.org/pierrejoye/gd-libgd/overview source], but note that you'll also have to install a number of other dependencies first.

Another alternative is to download Mac OS X binaries compiled by a member of the GMOD team, which you can find [http://sourceforge.net/projects/gmod/files/Generic%20Genome%20Browser/libgd-MacOSX/ here]. This should work well.

The third approach, and one that I favor, is to install them through Fink. Begin by running
<pre>
	sudo fink install gd2
</pre>

It should also install libjpeg and libpng, along with the appropriate libraries.




===Installing other programs with Fink===	
There are a number of cool programs you can obtain through Fink. One tool that may be of interest to bioinformaticists is [http://emboss.sourceforge.net/ EMBOSS]. This is an excellent collection of various useful tools for molecular biology. It can take a while to compile, as there are many dependencies and programs.

Another generally useful tool is _wget_, which can be used to download file(s) using http and ftp protocols from the commandline, without going through a browser.


==Installing Perl modules through CPAN==
The [http://search.cpan.org/ Comprehensive Perl Archive Network] is an extensive repository of Perl modules. If you're faced with a difficult job of coding some project, chances are that someone else has either done it for you, or at least written some code that will make the job easier. There are thousands of Perl modules in CPAN, some of which are just right for you.

While it's possible to download any module's source code from CPAN and install it manually, there is an easier way using a package manager. To use the the CPAN shell, run the following command
<pre>
	sudo cpan
</pre>

When you first run CPAN, it will ask to run through a bunch of configuration questions. It’s probably ok to let it do it for you automatically, but everyone should go through those questions once in their life, right? (according to Larry Wall, the original author of the Perl language). There may be things you want to change, such as CPAN mirror sites. Also, set both Make and Build arguments to uninstall previous versions when possible.

CPAN shell will keep its files in one directory, by default `~/.cpan`. I usually set this `/usr/local/cpan` to make it available to other users.

All the modules should be installed under `/Library/Perl`. As of Mac OS X 10.6 (or was it 10.5.something?), upgrades of system-installed modules should be installed in `/Library/Perl/Updates`, thus avoiding conflicts and changes to `/System/Library/Perl`; these upgrades should take precedence over those installed in the system library. 

Once in the CPAN shell, installing a module is as simple as typing `install <name_of_module>`. To find a module in the CPAN repository, type `d /keyword/`, where keyword is a regular expression to find the distribution you want. Type `h` to get the help menu for additional functions. 

Some basic modules to upgrade or install right away (but probably not absolutely necessary) include the following. 
	* readline
	* YAML
	* CPAN
	* Module::Build
	* ExtUtils::MakeMaker


===Trouble shooting	Perl module installation===
Despite the ease of package manager for installing Perl modules, things don't always go right. All Perl modules have (or should have) tests which confirm that the module is compiled or set up properly. Sometimes these fail, for various reasons.

Look back through the output for possible clues to the failure. Often times there is a missing prerequisite module (or version) that wasn't caught. Look for an error that complains about not finding XXX in @INC. Install the missing prereq and try again.

Sometimes the module needs to compile a small binary executable extension, usually a program written in C, that can dramatically speed up certain functions. Many times these extensions need system or package libraries, which must be found in the environment path. Make sure those are available. For example, the perl module GD.pm needs access to the gd2 libraries, which can be installed (see above).

Note that there may be warnings about missing or wrong file or machine architectures when compiling extensions. Mac OS X is funny in that it can run on PowerPC (ppc), 32-bit Intel (i386), and 64-bit Intel (x86_64) machine architectures, and many executable programs and libraries include code for all three architectures (Universal Binary). However, libraries built under Fink as well as other compiled libraries will usually only have only one architecture, and the compiler will warn about this. You can safely ignore those warnings.

Sometimes, making or building a Perl module under the CPAN shell just doesn't work quite right, but running it manually from the terminal (Bash prompt) does work. You can try grabbing the source tarball from the CPAN website, or from the source directory within the CPAN directory, and try it. Read the documentation that comes with the package. This has occasionally worked for me, for whatever reason. 

Finally, it's possible that there is an error in the test that's preventing the module from installing, but that the module is, in fact, working just fine. You can always try a `force install`, and then empirically test your program(s). I generally try to avoid this (being cautious), but have resorted to it successfully. 


===Important BioPerl pre-requisites===
There are a number of pre-requisites you can install to make the BioPerl installation smoother, as well as modules that are required for several of my programs. Installing BioPerl directly should take care of these prerequisites for you, but I find the easiest way is to install all of these through CPAN. Watch out for prerequisites, and let CPAN install those for you.
	* GD
	* GD::SVG
	* SVG
	* CGI
	* DBI
	* DBD::mysql
	* DBD::SQLite
	* Statistics::Descriptive
	* Data::Stag


===Additional modules for biotoolbox===
Some additional modules that my programs use but are not necessarily required for BioPerl or GBrowse include the following.
	* GD::Graph
	* GD::Graph::smoothlines
	* Statistics::Lite
	* Statistics::LineFit
	* Compress::Zlib
	* IO::Zlib
	* Config::Simple
	* Pod::Usage
	* Algorithm::Cluster


===Install BioPerl===
Install [http://www.bioperl.org/wiki/Main_Page BioPerl]. You can do one of two things. Install the latest standard version from CPAN (`CJFIELDS/BioPerl-1.6.900.tar.gz`), which should be adequate for most purposes.

There are dozens of prerequisite modules for bioperl, but many (all?) are not absolutely necessary. I've listed above the ones that I think are the most needed, so you should be able to safely skip most of the prerequisites it lists. However, if you miss one, perl usually does a pretty good job at complaining that a required module is missing, and you can always go back and install it.

Since BioPerl is under continual development, and a number of improvements have been made, the latest bioperl-live distribution may be ideal. 

If you download the latest live [http://github.com/bioperl/bioperl-live/tarball/master bioperl version], follow the instructions for installing, but it should go something like the following. The same warnings about prerequisites apply as above.
<pre>
	perl Build.PL
	./Build test
	sudo ./Build install
</pre>

	
==Installing GBrowse==
Install [http://gmod.org/wiki/GBrowse GBrowse]. This is now available through CPAN. There are actually two distributions to install. You may need to search CPAN to find the latest GBrowse version; try typing `d /GBrowse/` in the CPAN shell to do a search.
	* Bio::Graphics
	* GBrowse

It should be safe to accept the default locations for the browser installation files. However, feel free to change if you so desire.

*Important!* You will need to turn on Apache web server using the Sharing tab of System Preferences.

Also, the default security settings need to be adjusted to allow for GBrowse to work correctly; otherwise I have issues. This may not  be the best fix, as I’m not an Apache expert. In the file `/etc/apache2/httpd.conf`, find the `<Directory />` stanza and comment out the following lines 
<pre>
	Order deny,allow
	Deny from all lines. 
</pre>
Then add the following lines:
<pre>
	Order allow,deny
	Allow from all
</pre>
You should be able to test GBrowse by navigating to http://localhost/cgi-bin/gb2/gbrowse The default yeast genome should come up.
	
==Installing Samtools==
[http://samtools.sourceforge.net/index.shtml Samtools] is a project for working with large scale next generation sequencing alignments, such as from Illumina. The program is available as a precompiled binary for OS X, but we need the headers and library when installing the perl modules for working with sam files. Additionally, we want to build it as a 64-bit executable. Unfortunately, the make file is not very complete, so I've ended up manually copying much of the files into appropriate directories.

Download the source code tarball from [http://sourceforge.net/projects/samtools/files/ here]. Unpack into a working directory.

If you'll be working with 64-bit executables, edit the `Makefile` to un-comment out the `-m64` under CLFAGS. This ensures the program will compile as a 64-bit executable.

Compile by running `make`. Also compile razip by executing `make razip`. 

To make samtools generally accessible to all the users on the machine, move the samtools folder to `/usr/local/`. Since samtools is under continuous development, I'll append the version number to the folder name. Then, to make navigation easier, I'll create a symbolic link to the latest version directory to a general name. For example,
<pre>
	sudo cp samtools /usr/local/samtools-v0.1.18
	cd /usr/local/
	sudo ln -s samtools-v0.1.18 samtools
</pre>
Now I can always reference `/usr/local/samtools/` and it will point to the latest version directory. When a new version comes out, I install it side by side, and then simply update the `/usr/local/samtools` symlink.

To install the Bio-Samtools module (see below), you'll need to put the libraries in an accessible location. Rather than copying the appropriate files, and then doing it again and again with each new version, we can simplify using symlinks.
<pre>
	sudo ln -s /usr/local/samtools/*.h /usr/local/include/
	sudo ln -s /usr/local/samtools/libbam.a /usr/local/lib/
	sudo ln -s /usr/local/samtools/samtools.1 /usr/local/share/man/man1/
	sudo ln -s /usr/local/samtools/samtools /usr/local/bin/
	sudo ln -s /usr/local/samtools/razip /usr/local/bin/
</pre>
This also copies the executables into the `/usr/local/bin/` directory for easy access through the path.


==Installing Bio-Samtools==
Once Samtools has been installed, then the Bio-Samtools module (which includes `Bio::DB::Sam` and `Bio::DB::Bam`) may be installed. It should automatically find the library and headers you copied into the `/usr/local` directories. You can obtain the latest released version from CPAN. Try `d /bio-samtools/` to get the list of versions available (as of this writing it is `L/LD/LDS/Bio-SamTools-1.20.tar.gz`).


==Installing BigFile Support==
Installing support for Jim Kent's big files, including [http://genome.ucsc.edu/goldenPath/help/bigWig.html bigWig] and [http://genome.ucsc.edu/goldenPath/help/bigBed.html bigBed] files, require a bit more work. This support is optional for biotoolbox, and is not required. However, it is encouraged if you are working with high density tiling or next generation sequencing data.

While Jim Kent provides pre-compiled executables, we need the libraries to build Lincoln Stein's Bio-BigFile Perl modules, which are required for big file support in GBrowse and biotoolbox. There are general instructions for building from source [http://genome.ucsc.edu/admin/jk-install.html here]. 

Download Jim Kent's source [http://http://hgdownload.cse.ucsc.edu/admin/jksrc.zip files]. Extract the files into a working directory. I built all the files in my home directory first (`~/Documents/kent`), and then moved them into the appropriate locations.

Set up the environment variables. These are only really needed during compilation, so you can temporarily enter these commands in your terminal session. To make them more permament, add them to your `.profile` or `.bashrc` files in your home directory. The variables below assume a 64-bit Intel machine and that MySQL is installed through Fink, as described above; change as appropriate.
<pre>
	export MACHTYPE=x86_64
	export MYSQLLIBS="/sw/lib/mysqlclient.a -lz -lm"
	export MYSQLINC="/sw/include/mysql"
</pre>

First, compile the libraries. While we really only need one (I believe), it's easiest to simply compile them all.
<pre>
	cd ~/Documents/kent/src/
	make libs
</pre>

It's also useful to compile utilities that work with the bigWig and bigBed files. The utilities are found in individual directories under `kent/src/utils`. Enter each directory and compile the utility by entering the command `make`. It will automatically copy the compiled executable file into the directory `~/bin/x86_64/` (assuming a 64-bit machine). This is a short, but not exhaustive, list of programs that I might recommend.
	* bedGraphToBigWig
	* bedToBigBed
	* bigBedInfo
	* bigBedSummary
	* bigBedToBed
	* bigWigInfo
	* bigWigSummary
	* bigWigToBedGraph
	* bigWigToWig
	* wigToBedGraph
	* wigToBigWig

Move the files into appropriate common destinations. I suppose the entire kent source tree could be moved to a common location, but I chose to only copy the relevant files.
<pre>
	sudo mkdir /usr/local/kent_src
	cd /usr/local/kent_src
	sudo mkdir lib
	sudo mkdir lib/x86_64
	sudo mkdir inc
	sudo cp ~/Documents/kent/src/inc/`*` /usr/local/kent/inc
	sudo cp ~/Documents/kent/src/lib/x86_64/`*`.a /usr/local/kent/lib/x86_64
	sudo cp ~/bin/x86_64/`*` /usr/local/bin
</pre>

Finally, you can install the Bio-BigFile Perl module. I've tried through CPAN, but for some reason without much success. However, you can download the source tarball from CPAN and build it from shell prompt, which has worked for me. Extract into a working directory and `cd` into it.
<pre>
	perl Build.PL
</pre>

During the configuration, it will ask for the location of Kent's source tree. It really just needs the headers and libraries, which you've compiled and copied above. Enter the path `/usr/local/kent_src`. It expects the header and library files to be in the same directory structure as the original kent source tree; I don't think the generic `/usr/local/inc` and `/usr/local/lib` directories will work.

Continue with the module installation.
<pre>
	./Build
	./Build test
	sudo ./Build install
</pre>
	
==Ensembl Perl API==
To retrieve genome annotation from Ensembl's public MySQL database using the biotoolbox script `get_ensembl_annotation.pl`, you will need to install Ensembl's Perl API modules. It is not available through CPAN, but you can find installation instructions [http://www.ensembl.org/info/docs/api/api_installation.html here]. It is safe to ignore their BioPerl instructions, as you should already have it installed. Also, rather than following their instructions for setting up your environment, I simply manually copied their `EnsEMBL/` directory and all its contents (found under `ensembl/modules/Bio/` after extracting their archive) into `/Library/Perl/5.10.0/Bio/`. This allows their modules to be found automatically in the normal manner. 
Note that because this is essentially a manual installation; any prerequisites or updates must also done manually, and some functionality may be broken. With that said, I have not had any issues with at least the biotoolbox script `get_ensembl_annotation.pl`. Be forewarned.


=Additional Tools=
There are additional tools that are useful for bioinformatics analysis but are not necessarily needed for BioPerl, GBrowse, or biotoolbox. These are simply programs that I have found to be helpful in my own work.
	* [http://www.novocraft.com Novocraft's] novoalign alignment tool. This is quite useful in aligning short sequence tags, generated for example by Illumina next-generation sequencing, to the genome. While it's not a particularly fast aligner, it is quite thorough by tolerating mismatches and gaps, perfect for identifying SNPs and mutations. It handles paired-end, RNA sequencing, and bisulfite sequencing.
	* An alternative and fast aligner is [http://bowtie-bio.sourceforge.net/ bowtie]. This is ideal for ChIP-Seq, where exact sequence alignments are not of the highest importance but rather identifying location. 
	* [http://bonsai.hgc.jp/~mdehoon/software/cluster/software.htm Cluster] is an extremely useful program to generate heirarchical and k-means clusters. This is useful in identifying groups of features or genes based on collected data, for example microarray or ChIP-Seq data. 
	* [http://jtreeview.sourceforge.net/ TreeView] is a Java application perfect for displaying and visualizing the dendograms generated by the Cluster program. I have also used it to visualize the collected data mapped around a class of features generated with the biotoolbox script [http://code.google.com/p/biotoolbox/source/browse/trunk/scripts/map_data.pl map_data.pl]. The [http://code.google.com/p/biotoolbox/source/browse/trunk/scripts/manipulate_datasets.pl manipulate_datasets.pl] script has a function to export a tim data file to a simple text file that may be imported into either Treeview or Cluster.
	* David Nix's [http://useq.sourceforge.net USeq] and [http://http://timat2.sourceforge.net/ T2] suites of programs is an alternative suite of Java based programs for processing and analyzing next-generation sequencing and microarray data, respectively. 
	


	