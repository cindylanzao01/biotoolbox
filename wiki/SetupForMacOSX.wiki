#summary My own guide for setting up a Mac OS X computer with bioperl and GBrowse for bioinformatics analysis.

=Preparing a Mac OS X computer for bioinformatics analysis using bioperl=

==Prerequisites==
	* A relative familiarity with command line usage in the terminal. Users should be able to move around and understand the file system directory, view and manipulate files, run programs, etc.
	* Some very basic understanding of perl programs, modules, and how to install upgrade perl modules using CPAN. Knowing and writing the Perl language is not necessary.
	* Access to an account with administrator privileges. While it’s possible to do everything in a local home directory, I think it’s just easier to install in the main system. Fortunately, these installations are pretty safe and shouldn't break the system. Simply installing perl modules rarely (if at all possible) breaks the system, particularly with recent versions (earlier versions were another story). Using the Fink (or MacPorts) package manager keeps everything localized to a single directory (`/sw` for Fink, `/opt` for MacPorts) and never touches system directories. Finally, anything installed under `/usr/local/` is off-limits to Apple, so again there should be no conflicts with Apple system directories.
	* A good text editor. Microsoft Word will not do, and TextEdit is too limited. I prefer the free and quite capable [http://www.barebones.com/products/textwrangler/ TextWrangler], but several other competent editors also exist.
	* If you are using Mac OS X 10.6 Snow Leopard, then Perl can run as a 64 bit executable. This speeds some things up, but more importantly allows for more memory usage (some of these data files can consume GB of RAM!). By default, on a 64-bit computer with 10.6, perl should automatically execute Perl 5.10.0 as a 64-bit executable and you shouldn't have to do anything. But you'll need to know this when installing Fink below.
	* This may (or may not) be obvious, but you'll need to install the Developer Tools from Apple. For Snow Leopard 10.6, this can be found under the Optional Installs folder on the OS X Installation Disc. For Lion 10.7 or later, you'll need to download XCode from Apple's Mac App Store. You only really need to install the base and Unix development tools, unless you also intend to write Cocoa or iPhone Apps. 

==Updated notes for OS X 10.7 Lion==
These instructions were written initially for Mac OS X 10.6 Snow Leopard. Most of these instructions are still valid for OS X 10.7 Lion, but with a couple of notable differences. 
	# You will need to install XCode from Apple's Mac App Store. When you first run XCode, immediately go into preferences (after dismissing the splash welcome screen) and cancel and turn off automatic package and documentation downloads (unless you want them, of course, for you iPhone App development). It will save you a few GB of disk space.... Next, select the Command Line Tools to install them. These are essential to proceed with the installations below. You'll need to authenticate with your (free) Apple Developer Account. 
	# The default Perl is now 5.12.3. The 5.10 version used in OS X 10.6 Snow Leopard is still there, but unfortunately the upgrade process removes all of your previously installed modules in the main root Library (Bad Apple!). You might as well use the default Perl 5.12, as you will have to reinstall all your Modules. There's another argument for using [BioToolBoxSetUp#Installing_locally local libraries]. You can view a list of your installed modules by entering `perldoc perllocal` in the terminal.
	# If you're updating from a 10.6 system, heed the warnings about upgrading Fink. Specifically, you'll probably need to destroy your `/sw` directory and build again from scratch. Make a list of what you have installed. There are more details on the [http://www.finkproject.org/ Fink] site. Also note, Fink no longer maintains separate source trees (stable and unstable) under the 10.7 vesion as it did under previous OS X versions.
	# The FastCGI module for the Apache web server is no longer included. To install it, download Apache's [http://httpd.apache.org/mod_fcgid/ FastCGI] source code, compile, and install.

==Setting up Fink==
[http://www.finkproject.org/ Fink] is a convenient package manager for installing numerous open source software packages on Mac OS X. Using a package manager makes installation, upgrading, and removal of third party software much easier. 

An alternative package manager is [http://www.macports.org MacPorts], which should accomplish the same thing; I’m just more familiar with Fink for historical reasons. One other thing to keep in mind is that Fink tries to use many of the default Mac OS X libraries and executables whenever possible, whereas MacPorts sometimes wants to install everything on its own. This creates duplicates in your system, for example duplicate Perl installations. This can be good in that you get a newer version, but more complicated because you have to keep track of which version is executed.

To install, it's best to follow their [http://www.finkproject.org/download/srcdist.php instructions]. In general, run the following commands after downloading, extracting, and moving into the fink directory.
<pre>
	sudo ./bootstrap
	/sw/bin/pathsetup.sh
	sudo fink selfupdate
	sudo fink index -f
</pre>

*Important for Mac OS X 10.6* If you’ll be running 64-bit programs (e.g. default Perl 5.10 under Mac OS X 10.6), you must set up Fink to be 64-bit as well! In the source install, it will ask you this question at the beginning.

Fink installs into the `/sw` directory. This makes it convenient by completely isolating Fink software from the system directories, preventing potential conflicts and overwrites. MacPorts accomplishes the same thing by installing in `/opt`. 

For every user account on the computer, each user must run the following command just once to set up the Fink environment and use the programs installed through Fink. 
<pre>
	/sw/bin/pathsetup.sh
</pre>

====Setting up Fink source trees====
*Note:* separate source trees are no longer valid for 10.7 installations; Lion users can skip this. The various software packages available to Fink users are primarily found in two different source trees, _stable_ and _unstable_. The versions in the stable tree are usually older, but in theory more reliable. Unfortunately, not everything I want is included in the stable tree, necessitating looking in the unstable tree. I find that many programs are only found under the unstable tree, which, despite the name, are often quite usable. These are always the latest versions.

To enable the unstable tree, edit the file `/sw/etc/fink.conf`. Find the line that begins with "Trees:" edit the line to look like the following.
<pre>
	Trees: local/main stable/main stable/crypto unstable/main unstable/crypto
</pre>

====Using Fink====
To find a program to install, run the following command.
<pre>
	fink list <program>
</pre>

To list installed programs, run
<pre>
	fink list -i
</pre>

To install the program you want, run the following command. Fink will identify necessary prerequisites and offer to install those as well. Always accept those. 
<pre>
	fink install <program>
</pre>

You can learn more by running `fink --help`.
	 
==Installing a database==
GBrowse as well as many of the biotoolbox programs require genome annotation to be put into a database. There are several choices.

SQLite is a lightweight database system that stores all of the database tables in a single file. It's reasonably fast and easy to manage - one file per database. This is already installed in Mac OS X, although you will need to install the appropriate Perl modules to use it.

MySQL is a commonly used open source database that can be used from small databases to large enterprise databases. It uses a daemon to handle multiple simultaneous connections and read/write transactions. Note that if you are using Mac OS X Server, MySQL comes pre-installed for you. 

PostGreSQL is another alternative open source database with capabilities similar to MySQL. I don't personally have any experience with it, but it is supported by BioPerl. If you want to use PostGreSQL, you'll have to look elsewhere for help installing it (I'm sure it's not hard).

===Using Mac OS X Server MySQL===
If you happen to be using the Server version (and not the normal client version installed on everyday consumer Macs), then MySQL should already be installed. There are couple things to note. 

First, the standard socket location is different between Apple's Server MySQL and a typical install; you'll need to establish a symbolic link for `/var/mysql/mysql.sock` to the standard location of `/tmp/mysql.sock`. You may want to set up a simple startup bash script to do this for you at each restart.

Second, you'll need to install the MySQL development headers, which are not included by default. For Mac OS X Server 10.6, check out this Apple support [http://support.apple.com/kb/HT4006 document].

===Installing MySQL on a client system===
You can download an installation package from the main [http://www.mysql.com MySQL] web site. While installing just the pre-compiled version is tempting, it probably won't work very well later on. The reason is that to install the Perl database driver modules you'll need some developer headers that are only included with the source install. So you will need to install from source and compile the executable for your machine. You can do this one of two ways; download the source files from the MySQL web site and follow their directions, or you can use Fink.

To install MySQL through Fink, enter the following:
<pre>
	sudo fink install mysql mysql-client mysql15-dev mysql15-shlibs
</pre>

To make things easier, I also like to install the MySQL GUI [http://www.mysql.com/downloads/workbench/ Workbench]. This is especially helpful when you're not familiar with MySQL language and commands but need to set up databases, add users, and set permissions.

Once it's installed, start up MySQL by running the following command
<pre>
	sudo mysqld_safe –u root &
</pre>
The `&` symbol at the end forces the server process to run in the background, allowing you to exit your Terminal session and still keep it running. Make sure you have used `sudo` in the past minute or so and authenticate with your password; try running `sudo ls` prior to this command. Otherwise, by forcing it to background, you may never see the command prompt for `sudo`.

Set the MySQL root password
<pre>
	mysqladmin –u root password <your_new_password>
</pre>

An important note here. The MySQL server has its own notion of root that is separate from the computer's. So the above commands require two separate passwords (which could be the same word if you want): one for the Mac administrator `sudo` or root access, and the other for MySQL root access.

Test by starting the client. The `-p` option causes it to prompt for the MySQL password for the user "root". Exit the client by typing `exit` at the prompt.
<pre>
	mysql –u root –p
</pre>

Install the daemon loader for mysql
<pre>
	sudo fink install daemonic
</pre>

Set up MySQL to start up automatically by running
<pre>
	sudo daemonic enable mysql
</pre>

There should now be a startup plist file in `/Library/StartupItems/`. Now the MySQL Server daemon should start everytime when you reboot your Mac, and saves you from running the `mysqld_safe` command everytime. 

==Installing GD Libraries==
These are needed primarily by Bio::Graphics and GBrowse, but some of my graphing programs also use it. 

You can install GD from [https://bitbucket.org/pierrejoye/gd-libgd/overview source], but note that you'll also have to install a number of other dependencies first.

Another alternative is to download Mac OS X binaries compiled by a member of the GMOD team, which you can find [http://sourceforge.net/projects/gmod/files/Generic%20Genome%20Browser/libgd-MacOSX/ here]. This should work well.

The third approach, and one that I favor, is to install them through Fink. Begin by running
<pre>
	sudo fink install gd2
</pre>

It should also install libjpeg and libpng, along with the appropriate libraries.

==Installing Perl modules through CPAN==
The [http://search.cpan.org/ Comprehensive Perl Archive Network] is an extensive repository of Perl modules. If you're faced with a difficult job of coding some project, chances are that someone else has either done it for you, or at least written some code that will make the job easier. There are thousands of Perl modules in CPAN, some of which are just right for you.

While it's possible to download any module's source code from CPAN and install it manually, there is an easier way using a package manager. To use the the CPAN Shell, run the following command
<pre>
	sudo cpan
</pre>

When you first run CPAN, it will ask to run through a bunch of configuration questions. It’s probably ok to let it do it for you automatically, but everyone should go through those questions once in their life, right? (according to Larry Wall, the original author of the Perl language). There may be things you want to change, such as CPAN mirror sites. Also, set both Make and Build arguments to uninstall previous versions when possible.

CPAN shell will keep its files in one directory, by default `~/.cpan`. I usually set this to `/usr/local/cpan` to put it in a more generic location.

All the modules should be installed under `/Library/Perl`. As of Mac OS X 10.6 (or was it 10.5.something?), upgrades of system-installed modules should be installed in `/Library/Perl/Updates`, thus avoiding conflicts and changes to `/System/Library/Perl`; these upgrades should take precedence over those installed in the system library. 

Here is an extremely simplified primer for working with the CPAN Shell. You can also look at the inline help by typing `h` at the CPAN Shell prompt.

You can search for modules by entering this command
<pre>
	m /something/
</pre>

You can also search for a distribution.
<pre>
	d /something/
</pre>

You can install a module or distribution this way
<pre>
	install some::module
</pre>

Or by specifying the exact version file
<pre>
	install SOMEBODY/SomeModule-1.0.1.tar.gz
</pre>

It's possible that CPAN will detect prerequisites for your module. If so, it will attempt to prepend their installation before installing your requested module. Just say yes to those.

If the module was installed properly, you should find something like 
<pre>
	/usr/bin/make install -- OK
</pre>
somewhere near the end of all the text that goes by. If you see `NOT OK`, then something went wrong and you will have to trouble shoot by looking back at the error messages. It's usually because something else was missing, or a C library is of the wrong architecture for the version you're using, e.g. 32-bit versus 64-bit, or i386 versus PPC.

Some basic modules to upgrade or install right away (but probably not absolutely necessary) include the following. 
	* `readline`
	* `Term::ReadKey`
	* `YAML`
	* `CPAN`
	* `Module::Build`
	* `ExtUtils::MakeMaker`

===Trouble shooting	Perl module installation===
Despite the ease of package manager for installing Perl modules, things don't always go right. All Perl modules have (or should have) tests which confirm that the module is compiled or set up properly. Sometimes these fail, for various reasons.
Look back through the output for possible clues to the failure. Often times there is a missing prerequisite module (or version) that wasn't caught. Look for an error that complains about not finding XXX in @INC. Install the missing prereq and try again.
Sometimes the module needs to compile a small binary executable extension, usually a program written in C, that can dramatically speed up certain functions. Many times these extensions need system or package libraries, which must be found in the environment path. Make sure those are available. For example, the perl module GD.pm needs access to the gd2 libraries, which can be installed (see above).
Note that there may be warnings about missing or wrong file or machine architectures when compiling extensions. Mac OS X is funny in that it can run on PowerPC (ppc), 32-bit Intel (i386), and 64-bit Intel (x86_64) machine architectures, and many executable programs and libraries include code for all three architectures (Universal Binary). However, libraries built under Fink as well as other compiled libraries will usually only have only one architecture, and the compiler will warn about this. You can safely ignore those warnings.
Sometimes, making or building a Perl module under the CPAN shell just doesn't work quite right, but running it manually from the terminal (Bash prompt) does work. You can try grabbing the source tarball from the CPAN website, or from the source directory within the CPAN directory, and try it. Read the documentation that comes with the package. This has occasionally worked for me, for whatever reason. 
Finally, it's possible that there is an error in the test that's preventing the module from installing, but that the module is, in fact, working just fine. You can always try a `force install`, and then empirically test your program(s). I generally try to avoid this (being cautious), but have resorted to it successfully. 

===Install BioPerl===
Install [http://www.bioperl.org/wiki/Main_Page BioPerl]. You can do one of two things. Install the latest standard version from CPAN (`C/CJ/CJFIELDS/BioPerl-1.6.901.tar.gz`), which should be adequate for most purposes, or obtain the latest development version from GitHub. 

There are dozens of prerequisite modules for bioperl, but many are not absolutely necessary. If you install through CPAN, which is the easiest method, it should be able to automatically install the prerequisites for you. You can select which ones you want to install. 

If you download the latest live [http://github.com/bioperl/bioperl-live/tarball/master bioperl version], follow the instructions for installing, but it should go something like the following. Note that you will have to install the prerequisites manually before building bioperl.
<pre>
	perl Build.PL
	./Build test
	sudo ./Build install
</pre>

===Additional modules for biotoolbox===
There are a few additional modules that are required by the biotoolbox scripts. The easiest way to check for these is to run the biotoolbox script [Pod_check_dependencies check_dependencies.pl], located in the biotoolbox root directory. You can download the latest biotoolbox version  [http://code.google.com/p/biotoolbox/downloads/list here]. It uses CPAN to check the latest available modules, and it will offer to install missing or upgrade out-of-date modules for you. Note that not all of the modules are required for biotoolbox; the dependencies depend on which biotoolbox script you wish to use. Some additional modules that my programs use but are not necessarily required for BioPerl or GBrowse include the following.
	* `Config::Simple`
	* `IO::Zlib`
	* `Statistics::Lite`
	* `Statistics::Descriptive`
	* `Archive::Zip`
	* `Algorithm::Cluster`
	* `DBI`
	* `DBD::SQLite`
	* `DBD::mysql`
	* `GD`
	* `GD::Graph`
	* `GD::Graph::smoothlines`

====Errors regarding GD====
Note that on Mac OS X using libGD installed through Fink, I generally see test errors when installing the GD Perl module. I have been able to force install (ignoring the errors), and everything seems to still work. It seems to be just a bug with the test scripts, not with GD itself. Be forewarned.

==Installing GBrowse==
[http://gmod.org/wiki/GBrowse GBrowse] is a web-based generic genome browser that can display genome annotation and genomic data from microarray or next generation sequencing. Before you begin, you will likely need to install a few more Perl modules. You can install them through CPAN as above.
	* `CGI::Session`
	* `Text::ParseWords`
	* `JSON`
	* `Bio::Graphics`
There may or may not be others, but the GBrowse installer will notify you of missing modules.

*Important!* You will need to turn on the Apache web server. You can use the Sharing tab of System Preferences, or from the command line enter `sudo apachectl start`. 

GBrowse is now available through CPAN. However, I actually find it easier to install it from the command line, rather than through the CPAN Shell. The reason being is there is a configuration step that I simply find a little easier to use on the command line. Download the package from [http://search.cpan.org/dist/GBrowse/ here] and unpack it in a temporary directory. Move into the directory, and begin the build process
<pre>
	perl Build.PL
</pre>

Take note of any missing required Perl modules and remedy as necessary. You can also have the Build script install any missing dependencies.
<pre>
	./Build installdeps
</pre>

Next comes the configuration part. Run 
<pre>
	./Build config
</pre>
The script will ask a series of questions. It should be safe to accept the default locations for everything; however, feel free to change if you desire. One change you may want to note is the Apache user should be `_www` instead of the default `www`.

Next, install the browser. Run
<pre>
	./Build
	./Build test
	sudo ./Build install
</pre>

Hopefully, everything should go smoothly. A couple of things to note.

First, the install script will ask to restart Apache. It usually doesn't succeed if you let it, so I always do it myself. Run `sudo apachectl graceful` to restart it from the command line.

Second, the permissions are rarely set correctly on the temp and library folders, so you may need to double check these. If you accepted the defaults, these should be `/var/lib/gbrowse2` and `/var/tmp/gbrowse2`. To set them manually, try this
<pre>
	sudo chown -R _www:_www /var/lib/gbrowse2
	sudo chown -R _www:_www /var/tmp/gbrowse2
</pre>


===Setting up FastCGI with GBrowse===
I recommend enabling FastCGI to speed up web rendering. This enables running the GBrowse Perl script to run as long-lived process, rather than executing the Perl script each and every time you do something in the browser. This should be a noticeable improvement in browsing. 
To enable on Mac OS X 10.6 Snow Leopard, you will have to edit the file `/etc/apache2/httpd.conf` as root. Find the following line in the file and un-comment it. 
<pre>
	# LoadModule fastcgi_module     libexec/apache2/mod_fastcgi.so
</pre>

To enable FastCGI on OS X 10.7 Lion, you will need to install it, as Apple no longer includes it. Download Apache's updated [http://httpd.apache.org/mod_fcgid/ FastCGI] source package from their [http://httpd.apache.org/download.cgi#mod_fcgid mirror]. Unpack, and install using the following commands.
<pre>
	./configure.apxs
	make
	sudo make install 
</pre>
It should install `mod_fcgid.so` into `/usr/libexec/apache2/` for you and automatically update `/etc/apache2/httpd.conf` to enable the FastCGI daemon.

Sometimes I have permissions problems executing the scripts, especially when using FastCGI. You will need to edit the file `/etc/apache2/other/gbrowse2.conf`. Find this entry in the file
<pre>
	<Directory "/Library/Webserver/CGI-Executables/gb2">
	  Options ExecCGI
	  SetEnv GBROWSE_CONF   "/etc/gbrowse2"
	</Directory>
</pre>
and add the following lines to make this
<pre>
	<Directory "/Library/Webserver/CGI-Executables/gb2">
	  Options ExecCGI
	  SetEnv GBROWSE_CONF   "/etc/gbrowse2"
	  # extra permissions
	  Order allow,deny
	  Allow from all
	</Directory>
</pre>
Finally, restart the Apache server, and try the new link http://localhost/fgb2/gbrowse.

===Setting up GBrowse user accounts===
One of the cool things about GBrowse is the ability to offer user accounts. This allows multiple users to store their file uploads and personal settings and, more importantly, have them persistently available across browser and platform sessions.

GBrowse can accept [http://openid.net OpenID] authentications, Pluggable Authentication Modules (PAM), or handle its own user set up and authentications. More information about authenticating users can be found [http://www.gmod.org/wiki/GBrowse_Configuration/Authentication here]. 

====Setting up PAM Authentication with OS X accounts====
For a small lab setting with a limited number of controlled users, I find it easy to set up the PAM authentication using the Mac OS X user accounts for authentication. For larger setups, you may want to investigate other options. 

You will need to install some additional Perl modules before you begin.
	* `Authen::Simple`
	* `Authen::PAM`
	* `Authen::Simple::PAM`
These will likely require installing some other dependencies. CPAN should take care of that for you.

Next, create a new service definition file in `/etc/pam.d/`. The easiest way to do this is simply duplicate the `login` file and rename it to `gbrowse`.
<pre>
	cd /etc/pam.d/
	sudo cp login gbrowse
</pre>
It's likely not every line is needed from the `login` definition file, but I am not knowledgable enough to know what to keep or toss. I just know it works with everything in there.

Next you'll need to enable user accounts in GBrowse. Edit the main GBrowse configuration file, `/etc/gbrowse2/GBrowse.conf`. Find the line `user_accounts` and change the `0` to `1` to enable. Next, uncomment the following line:
<pre>
	authentication plugin = PamAuthenticate
</pre>

Save the file, restart the Apache web server, reload the GBrowse page, and you should now have login link in the upper right corner. Provide your Mac OS X user account credentials to login. There is a place in `GBrowse.conf` where you can provide a helpful hint to users in the login dialog box.

==Installing Bam file support==
Next generation sequencing technologies, such as those from Illumina and others, are the current big technique for genomic analysis, including transcription, epigenetics, and mutation discovery. [http://samtools.sourceforge.net/index.shtml Samtools] is a collection of programs, libraries, and file format specifications for working with next generation sequencing. The text Sam and binary Bam file formats allow for convenient storage and access of sequence alignments. Samtools is required as a foundation for working with sequence alignments in both GBrowse and biotoolbox.

===Installing Samtools===
The Samtools program is available as a precompiled binary for OS X, but we need the headers and library when installing the perl modules for working with sam files. Additionally, we want to build it as a 64-bit executable. Unfortunately, the make file is not very complete, so I've ended up manually copying much of the files into appropriate directories.

Download the source code tarball from [http://sourceforge.net/projects/samtools/files/ here]. Unpack into a working directory.

If you'll be working with 64-bit executables (likely), edit the `Makefile` to un-comment out the `-m64` on the line containing `CLFAGS`. This ensures the program will compile as a 64-bit executable.

Compile by running `make`. Also compile razip by executing `make razip`. 

To make samtools generally accessible to all the users on the machine, move the samtools folder to `/usr/local/`. Since samtools is under continuous development, I'll append the version number to the folder name. Then, to make navigation easier, I'll create a symbolic link to the latest version directory to a general name. For example,
<pre>
	sudo cp ./samtools /usr/local/samtools-v0.1.18
	cd /usr/local/
	sudo ln -s samtools-v0.1.18 samtools
</pre>
Now I can always reference `/usr/local/samtools/` and it will point to the latest version directory. When a new version comes out, I install it side by side in `/usr/local/`, and then simply update the `/usr/local/samtools` symlink.

To install the Bio-Samtools module (see below), you'll need to put the libraries in an accessible location. Rather than copying the appropriate files, and then doing it again and again with each new version, we can simplify using symlinks.
<pre>
	sudo ln -s /usr/local/samtools/*.h /usr/local/include/
	sudo ln -s /usr/local/samtools/libbam.a /usr/local/lib/
	sudo ln -s /usr/local/samtools/samtools.1 /usr/local/share/man/man1/
	sudo ln -s /usr/local/samtools/samtools /usr/local/bin/
	sudo ln -s /usr/local/samtools/razip /usr/local/bin/
</pre>
This also copies the executables into the `/usr/local/bin/` directory for easy access through the path.

===Installing Bio-Samtools===
Once Samtools has been installed, then the Bio-Samtools module (which includes `Bio::DB::Sam` and `Bio::DB::Bam`) may be installed. It should automatically find the library and headers you copied into the `/usr/local` directories. You can obtain the latest released version from CPAN. Try `d /bio-samtools/` to get the list of versions available (as of this writing it is `L/LD/LDS/Bio-SamTools-1.20.tar.gz`).

One error you may or may not encounter is regarding shared libraries, and errors mentioning recompiling with "-fPIC". Some combinations of Perl and GCC don't mix well. In this case, go back to the samtools `Makefile`, re-edit the CFLAGS line and add "-fPIC" to the line (make sure there isn't a `#` comment character before it!). Then recompile.
<pre>
	make clean
	make
	make razip
</pre>
Repeat the Bio-Samtools installation (you may need to issue the clean command from within CPAN Shell). It should work now.

==Installing BigFile Support==
Installing support for Jim Kent's big files, including [http://genome.ucsc.edu/goldenPath/help/bigWig.html bigWig] and [http://genome.ucsc.edu/goldenPath/help/bigBed.html bigBed] files, require a bit more work. This support is optional for biotoolbox, and is not required. However, it is encouraged if you are working with high density tiling or next generation sequencing data.

===Building the Kent libraries===
While Jim Kent provides pre-compiled executables, we need the libraries to build Lincoln Stein's Bio-BigFile Perl modules, which are required for big file support in GBrowse and biotoolbox. There are general instructions for building from source [http://genome.ucsc.edu/admin/jk-install.html here], and more specific instructions in the [http://search.cpan.org/dist/Bio-BigFile/ Bio-BigFile] Perl module README file.

Download Jim Kent's source [http://hgdownload.cse.ucsc.edu/admin/jksrc.zip files]. Extract the files into a working directory. I built all the files in my home directory first (`~/Documents/kent`), and then moved them into the appropriate locations.

Set up the environment variables. These are needed during both library compilation and building the Perl modules later. You can temporarily enter these commands in your current terminal session. To make them more permament, add them to your `.profile` or `.bashrc` files in your home directory. The variables below assume a 64-bit Intel machine; change as appropriate.
<pre>
	export MACHTYPE=x86_64
	cd kent/src/lib
	make
	cd ..
</pre>

You will also need to compile the utilities that work with the bigWig and bigBed files. The utilities are found in individual directories under `kent/src/utils`. Before you begin, you will need to make a destination directory for the executables.
<pre>
	mkdir ~/bin/x86_64
</pre>

Now enter each utility directory and issue the `make` command. It will automatically copy the compiled executable file into the executable directory you just made. This is a short, but not exhaustive, list of programs that I might recommend.
	* `bedGraphToBigWig`
	* `bedToBigBed`
	* `bigBedInfo`
	* `bigBedSummary`
	* `bigBedToBed`
	* `bigWigInfo`
	* `bigWigSummary`
	* `bigWigToBedGraph`
	* `bigWigToWig`
	* `wigToBedGraph`
	* `wigToBigWig`

Move the files into appropriate system directories for availability for other users. I suppose the entire kent source tree could be moved to a common location, but I chose to only copy the relevant files (at least with regard to the Bio-BigFile Perl modules).
<pre>
	sudo mkdir /usr/local/kent_src
	sudo cp -r ~/Documents/kent/src/inc /usr/local/kent_src/
	sudo cp -r ~/Documents/kent/src/lib /usr/local/kent_src/
	export KENT_SRC=/usr/local/kent_src
	sudo cp ~/bin/x86_64/`*` /usr/local/bin
</pre>

===Installing Bio-BigFile Perl module===
Finally, you can install the Bio-BigFile Perl module. Note that if you install through the CPAN Shell as root using `sudo`, your environment variables won't carry over to the root session. One solution is to set them again as root.
A simpler alternative is to compile the module as non-root, then install as root. Download the source tarball from CPAN and extract it into a working directory, then `cd` into it. Follow the instructions below for building it. If your MACH_TYPE and KENT_SRC environment variables are properly set, things should go well.
<pre>
	perl Build.PL
	./Build
	./Build test
	sudo ./Build install
</pre>
	
One error you may or may not encounter is regarding shared libraries, and errors mentioning recompiling with "-fPIC". Some combinations of Perl and GCC don't mix well. In that case, go back and edit the file `kent/src/inc/common.mk`. Find the line beginning with CFLAGS and add "-fPIC" to the line. Save, `make clean`, and `make` again. 

==Ensembl Perl API==
To retrieve genome annotation from Ensembl's public MySQL database using the biotoolbox script `get_ensembl_annotation.pl`, you will need to install Ensembl's Perl API modules. It is not available through CPAN, but you can find installation instructions [http://www.ensembl.org/info/docs/api/api_installation.html here]. 

It is safe to ignore their BioPerl instructions, as you should already have it installed. Also, rather than following their instructions for setting up your environment, I simply manually copied their `EnsEMBL/` directory and all its contents (found under `ensembl/modules/Bio/` after extracting their archive) into `/Library/Perl/5.10.0/Bio/` on Mac OS X 10.6 (or `/Library/Perl/5.12.3/Bio/` under OS X 10.7). This allows their modules to be found automatically in the normal manner. 

Note that because this is essentially a manual installation; any prerequisites or updates must also be done manually, and some functionality may be broken. With that said, I have not had any issues with at least the biotoolbox script `get_ensembl_annotation.pl`. Be forewarned.

==Installing other programs with Fink==
There are a number of cool programs you can obtain through Fink. One tool that may be of interest to bioinformaticists is [http://emboss.sourceforge.net/ EMBOSS]. This is an excellent collection of various useful tools for molecular biology. It can take a while to compile, as there are many dependencies and programs.

Another generally useful tool is _wget_, which can be used to download file(s) using http and ftp protocols from the commandline, without going through a browser.

==Additional Tools==
There are additional tools that are useful for bioinformatics analysis but are not necessarily needed for BioPerl, GBrowse, or biotoolbox. These are simply programs that I have found to be helpful in my own work.
	* [http://www.novocraft.com Novocraft's] novoalign alignment tool. This is quite useful in aligning short sequence tags, generated for example by Illumina next-generation sequencing, to the genome. While it's not a particularly fast aligner, it is quite thorough by tolerating mismatches and gaps, perfect for identifying SNPs and mutations. It handles paired-end, RNA sequencing, and bisulfite sequencing.
	* An alternative and fast aligner is [http://bowtie-bio.sourceforge.net/ bowtie]. This is ideal for ChIP-Seq, where exact sequence alignments are not of the highest importance but rather identifying location. 
	* [http://bonsai.hgc.jp/~mdehoon/software/cluster/software.htm Cluster] is an extremely useful program to generate heirarchical and k-means clusters. This is useful in identifying groups of features or genes based on collected data, for example microarray or ChIP-Seq data. This is a Java GUI program capable of many different clustering algorithms. For simply k-means clustering, you can also check out my biotoolbox script [Pod_run_cluster run_cluster.pl].
	* [http://jtreeview.sourceforge.net/ TreeView] is a Java application perfect for displaying and visualizing the dendograms generated by the Cluster program. I have also used it to visualize the collected data mapped around a class of features generated with the biotoolbox script [Pod_map_data map_data.pl]. The [Pod_manipulate_datasets manipulate_datasets.pl] script has a function to export a data file to a simple text file that may be imported into either Treeview or Cluster.
	* David Nix's [http://useq.sourceforge.net USeq] and [http://http://timat2.sourceforge.net/ T2] suites of programs is an alternative suite of Java based programs for processing and analyzing next-generation sequencing and microarray data, respectively. 
	
===Compiling a 64-bit liftOver tool on OS X===
The UCSC source tree includes a number of other additional programs. One useful one is the [http://genome.ucsc.edu/cgi-bin/hgLiftOver liftOver] tool for converting coordinates between genome versions. While they provide a 32-bit executable for [http://hgdownload.cse.ucsc.edu/admin/exe/ download] that is probably sufficient, if you want a 64-bit version you will need to compile one yourself. These instructions may also work with other tools (blat?).

This presumes you've followed the instructions above for installing the bigFile support (bigWig and bigBed). It also presumes you have installed MySQL and libpng (a prerequisite for the GD libraries) using Fink.

The liftOver tool is not included under `kent/src/utils/`, but rather a part of the browser. Therefore, we need to compile a few more things. First, we need to set up some more environment variables.
<pre>
	export PNGLIB=/sw/lib/libpng.a
	export MYSQLINC=/sw/include/mysql
	export MYSQLLIBS="/sw/lib/mysql/libmysqlclient.a -lz"
</pre>

Next, we begin compiling some additional libraries, and finally the liftOver tool itself.
<pre>
	cd kent/src/jkOwnLib
	make
	cd ../hg/lib
	make
</pre>

You should now have `jkhgap.a` and `jkOwnLib.a` libraries located under `kent/lib/x86_64`, in addition to `jkweb.a`. 

To compile liftOver, move into its directory and issue `make`.
<pre>
	cd kent/src/hg/liftOver
	make
</pre>
You should now have a 64-bit liftOver executable in `~/bin/x86_64/`.
	