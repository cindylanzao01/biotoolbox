#summary Converted POD documentation.
#labels ManPage
_This page was generated from POD using [http://code.google.com/p/pod2gcw pod2gcw] and is not intended for editing._

==NAME==
get_datasets.pl

A program to collect data for a list of features

==SYNOPSIS==
get_datasets.pl `[`--options...`]` `[`<**filename>`]`

{{{
  Options:
  --new
  --in <filename>
  --out filename
  --db <name | filename>
  --ddb <name | filename>
  --feature <type | type:source | alias>, ...
  --data <none | file | type>, ...
  --method [mean | median | stddev | min | max | range | sum | rpm | rpkm]
  --value [score | count | length]
  --log
  --strand [all | sense | antisense]
  --exons
  --extend <integer>
  --start <integer>
  --stop <integer>
  --fstart <decimal>
  --fstop <decimal>
  --limit <integer>
  --pos [5 | m | 3]
  --win <integer>
  --step <integer>
  --force_strand
  --gz
  --version
  --help
}}}
==OPTIONS==
The command line flags and descriptions:

__--new

__
  Generate a new table of features. Overrides any specified input file.  Requires a database and feature to be defined.
__
  __
__--in <**filename>

__
  Specify an input file containing either a list of database features or  genomic coordinates for which to collect data. The file should be a  tab-delimited text file, one row per feature, with columns representing  feature identifiers, attributes, coordinates, and/or data values. The  first row should be column headers. Bed files are acceptable, as are  text files generated with this program.
__
  __
__--out <**filename>

__
  Specify the output file name. Required for new feature tables; optional for  current files. If this is argument is not specified then the input file is  overwritten.
__
  __
__--db <**name | filename>

__
  Specify the name of a !BioPerl** database from which to obtain the  annotation, chromosomal information, and/or data. Typically a  Bio::DB::!SeqFeature**::Store database schema is used, either from a  relational database, SQLite file, or a single GFF3 file to be loaded  into memory. Alternatively, a !BigWigSet** directory, or a single !BigWig**,  !BigBed**, or Bam file may be specified.
__
  __
  A database is required for generating new files. When generating a new  genome interval file, a bigFile or Bam file listed as a data source  will be adopted as the database.
__
  __
  For input files, the database name may be obtained from the file  metadata. A different database may be specified from that listed in  the metadata when a different source is desired.
__
  __
__--ddb <**name | filename>

__
  Optionally specify the name of an alternate data database from which  the data should be collected, separate from the primary annotation  database. The same options apply as to the --db option.
__
  __
__--feature <**type | type:source | alias>,...

__
__--feature genome

__
  Specify the type of feature from which to collect values. This is required  only for new feature tables. Three types of values may be passed: the  feature type, feature type and source expressed as 'type:source', or an  alias to one or more feature types. Aliases are specified in the  `biotoolbox.cfg` file and provide a shortcut to a list of one or more  database features. More than one feature may be included as a  comma-delimited list (no spaces).
__
  __
  To collect genomic intervals (or regions) simply specify 'genome' as  the feature type.
__
  __
__--data <**type1,type2,type3&type4,...>

__
__--data <**file1,...>

__
__--data none

__
  Provide the name of the dataset to collect the values. Use this argument  repeatedly for each dataset to be collected. Two or more datasets may be merged into one by delimiting with an ampersand "&" (no spaces!). If no  dataset is specified on the command line, then the program will  interactively present a list of datasets from the database to select.
__
  __
  The dataset may be a feature type in a !BioPerl** Bio::DB::!SeqFeature**::Store  or Bio::DB::!BigWigSet** database. Provide either the feature type or  type:source. The feature may point to another data file whose path is  stored in the feature's attribute tag (for example a binary  Bio::Graphics::Wiggle .wib file, a bigWig file, or Bam file), or the  features' scores may be used in data collection.
__
  __
  Alternatively, the dataset may be a database file, including bigWig (.bw),  bigBed (.bb), or Bam alignment (.bam) files. The files may be local or  remote (specified with a http: or ftp: prefix).
__
  __
  To force the program to simply write out the list of collected features  without collecting data, provide the dataset name of "none".
__
  __
__--method `[`mean | median | stddev | min | max | range | sum | rpm | rpkm`]`

__
  Specify the method for combining all of the dataset values within the  genomic region of the feature. Accepted values include:
__
  __
{{{
  - mean        (default)
  - median
  - sum
  - stddev      Standard deviation of the population (within the region)
  - min
  - max
  - range       Returns difference of max and min
  - rpm         Reads Per Million mapped, Bam/BigBed only
  - rpkm        Reads Per Kilobase per Million Mapped, Bam/BigBed only
}}}
  When collecting data using rpkm, the normalized sum of the reads is  divided by the length of the feature requested (the Kilobase part in rpkm).  Note that for mRNA or gene features, this will be the sum of the exon  lengths, not the gene or mRNA.
__
  __
__--value `[`score | count | length`]`

__
  Optionally specify the type of data value to collect from the dataset or  data file. Three values are accepted: score, count, or length. The default  value type is score. Note that some data sources only support certain  types of data values. Wig and !BigWig** files only support score and count;  !BigBed** and database features support count and length and optionally  score; Bam files support basepair coverage (score), count (number of  alignments), and length.
__
  __
__--log

__
  Indicate the dataset is (not) in log2 space. The log2 status of the dataset is  critical for accurately mathematically combining the dataset values in the  feature's genomic region. It may be determined automatically if the dataset  name includes the phrase "log2".
__
  __
__--strand `[`all | sense | antisense`]`

__
  Specify whether stranded data should be collected for each of the  datasets. Either sense or antisense (relative to the feature) data  may be collected. Note that strand is not supported with some  data files, including bigWig files (unless specified through a GFF3 feature  attribute or Bio::DB::!BigWigSet** database) and Bam files (score coverage is not but count is). The default value is 'all', indicating all data  will be collected.
__
  __
__--exons

__
  Optionally indicate that data should be collected only over the exon  subfeatures of a gene or transcript, rather than the entire gene.  Subfeatures with a primary_tag of exon are preferentially taken. If exons  are not defined, then CDS and UTR subfeatures are used, or the entire  gene or transcript if no appropriate subfeatures are found. Note that  the options extend, start, stop, fstart, and fstop are ignored.  Default is false.
__
  __
__--extend <**integer>

__
  Optionally specify the bp extension that will be added to both sides of the  feature's region.
__
  __
__--start <**integer>

__
  Optionally specify the start position of the region to collect values relative  to the feature start. Prefix a negative sign to specify  an upstream position. Specify a negative value on the command line with an  equals sign, e.g. "--start=-300'. Must be combined with "--stop".
__
  __
__--stop <**integer>

__
  Optionally specify the stop position of the region to collect values relative  to the feature start. Must be combined with "--start".
__
  __
__--fstart <**number>

__
  Optionally specify the fractional start position of the region to collect  values relative to the feature start (or end if specified). The fraction is  based on the feature's region length. The fraction should be presented as a  decimal number, e.g. 0.25. Prefix a negative sign to specify an upstream  position. Must be combined with "--fstop".
__
  __
__--fstop <**number>

__
  Optionally specify the fractional stop position of the region to collect  values relative to the feature start (or end if specified). The fraction is  based on the feature's region length. The fraction should be presented as a  decimal number, e.g. 0.25. A value > 1 would include the region downstream  of the feature. Must be combined with "--fstart".
__
  __
__--limit <**integer>

__
  Optionally specify the minimum size limit for subfractionating a feature's  region. Used in combination with fstart and fstop to prevent taking a  subregion from a region too small to support it. The default is 1000 bp.
__
  __
__--pos `[`5 | m | 3`]`

__
  Indicate the relative position of the feature with which the  data is collected when combined with the "start" and "stop" or "fstart"  and "fstop" options. Three values are accepted: "5" indicates the  5' prime end is used, "3" indicates the 3' end is used, and "m"  indicates the middle of the feature is used. The default is to  use the 5' end, or the start position of unstranded features.
__
  __
__--win <**integer>

__
  When generating a new genome interval list (feature type 'genome'),  optionally specify the window size. The default size is defined in the  configuration file, biotoolbox.cfg.
__
  __
__--step <**integer>

__
  Optionally indicate the step size when generating a new list of intervals  across the genome. The default is equal to the window size.
__
  __
__--force_strand

__
  For features that are not inherently stranded (strand value of 0) or that you want to impose a different strand, set this option when collecting stranded data. This will reassign the specified strand for each feature regardless of its original orientation. This requires the presence of a "strand" column in the input data file. This option only works with input file lists of database features, not defined genomic regions (e.g. BED files). Default is false.
__
  __
__--gz

__
  Indicate whether the output file should (not) be compressed by gzip.  If compressed, the extension '.gz' is appended to the filename. If a compressed  file is opened, the compression status is preserved unless specified otherwise.
__
  __
__--version

__
  Print the version number.
__
  __
__--help

__
  Display the POD documentation for this program.
__
  __
==DESCRIPTION==
This program will collect dataset values from a variety of sources, including  features in a !BioPerl** Bio::DB::!SeqFeature**::Store database, binary wig files  (.wib) loaded in a database using Bio::Graphics::Wiggle, bigWig files,  bigBed files, Bam alignment files, or a Bio::DB::!BigWigSet** database.

The values are collected for a list of known database features (genes,  transcripts, etc.) or genomic regions (defined by chromosome, start, and  stop). The list may be provided as an input file or generated as a new  list from a database. Output data files may be reloaded for additional  data collection.

At each feature or interval, multiple data points within the genomic segment  are combined statistically and reported as a single value for the feature.  The method for combining datapoints may be specified; the default method is  the mean of all datapoints.

The coordinates of the features may be adjusted in numerous ways, including  specifying a specific relative start and stop, a fractional start and stop,  an extension to both start and stop, and specifying the relative position  (5' or 3' or midpoint).

Stranded data may be collected, if the dataset supports stranded information.  Also, two or more datasets may be combined and treated as one. Note that  collecting stranded data may significantly slow down data collection.

The output file is a standard tim data formatted file, a tab delimited  file format with each row a genomic feature and each column a dataset.  Metadata regarding the datasets are stored in comment lines at the beginning  of the file. The file may be gzipped.

==AUTHOR==
{{{
 Timothy J. Parnell, PhD
 Howard Hughes Medical Institute
 Dept of Oncological Sciences
 Huntsman Cancer Institute
 University of Utah
 Salt Lake City, UT, 84112
}}}
This package is free software; you can redistribute it and/or modify it under the terms of the GPL (either version 1, or at your option, any later version) or the Artistic License 2.0.

